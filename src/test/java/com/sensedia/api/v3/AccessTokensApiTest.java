/*
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sensedia.api.v3;

import com.sensedia.api.v3.client.ApiException;
import com.sensedia.api.v3.model.AccessToken;
import com.sensedia.api.v3.model.AccessTokenResponse;
import com.sensedia.api.v3.model.ChangeLogBean;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessTokensApi
 */
@Ignore
public class AccessTokensApiTest {

    private final AccessTokensApi api = new AccessTokensApi();

    
    /**
     * Retrieve access token total
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void accessTokenCount1Test() throws ApiException {
        String sensediaAuth = null;
        Long response = api.accessTokenCount1(sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Create a new access token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccessToken1Test() throws ApiException {
        String sensediaAuth = null;
        AccessToken bean = null;
        AccessToken response = api.createAccessToken1(sensediaAuth, bean);

        // TODO: test validations
    }
    
    /**
     * Find access token list by filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessToken1Test() throws ApiException {
        String sensediaAuth = null;
        String code = null;
        String owner = null;
        String status = null;
        Long expiresIn = null;
        String refreshToken = null;
        String scope = null;
        String keyword = null;
        Integer actualPage = null;
        Integer pageSize = null;
        String authIds = null;
        String beginDate = null;
        String endDate = null;
        String extraFields = null;
        List<AccessToken> response = api.getAccessToken1(sensediaAuth, code, owner, status, expiresIn, refreshToken, scope, keyword, actualPage, pageSize, authIds, beginDate, endDate, extraFields);

        // TODO: test validations
    }
    
    /**
     * Retrive changelog per access token id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChangeLogByAccessTokenId1Test() throws ApiException {
        Long id = null;
        String sensediaAuth = null;
        List<ChangeLogBean> response = api.getChangeLogByAccessTokenId1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Find access token by code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByCode1Test() throws ApiException {
        String code = null;
        String sensediaAuth = null;
        AccessToken response = api.getTokenByCode1(code, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Remove a access token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAccessToken1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        api.removeAccessToken1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Update a access token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccesstoken1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        AccessToken bean = null;
        AccessTokenResponse response = api.updateAccesstoken1(id, sensediaAuth, bean);

        // TODO: test validations
    }
    
    /**
     * Validate partial access token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validatePartialAccessToken1Test() throws ApiException {
        String sensediaAuth = null;
        AccessToken bean = null;
        Object response = api.validatePartialAccessToken1(sensediaAuth, bean);

        // TODO: test validations
    }
    
}
