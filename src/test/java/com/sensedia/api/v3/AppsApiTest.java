/*
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sensedia.api.v3;

import com.sensedia.api.v3.client.ApiException;
import com.sensedia.api.v3.model.APP;
import com.sensedia.api.v3.model.APPResponse;
import com.sensedia.api.v3.model.ChangeLogBean;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsApi
 */
@Ignore
public class AppsApiTest {

    private final AppsApi api = new AppsApi();

    
    /**
     * Retrieve App total
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appsCount1Test() throws ApiException {
        String sensediaAuth = null;
        Long response = api.appsCount1(sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Create a new app
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApp1Test() throws ApiException {
        String sensediaAuth = null;
        APP appTokenBean = null;
        APPResponse response = api.createApp1(sensediaAuth, appTokenBean);

        // TODO: test validations
    }
    
    /**
     * Return all apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppTokenByAppGallery1Test() throws ApiException {
        String sensediaAuth = null;
        List<APP> response = api.getAppTokenByAppGallery1(sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Find app list by filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppTokenByFilter1Test() throws ApiException {
        String sensediaAuth = null;
        String clientId = null;
        String name = null;
        String keyword = null;
        String status = null;
        String developer = null;
        Integer actualPage = null;
        Integer pageSize = null;
        String appIds = null;
        String beginDate = null;
        String endDate = null;
        String extraFields = null;
        List<APP> response = api.getAppTokenByFilter1(sensediaAuth, clientId, name, keyword, status, developer, actualPage, pageSize, appIds, beginDate, endDate, extraFields);

        // TODO: test validations
    }
    
    /**
     * Find app by code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppTokenById1Test() throws ApiException {
        String code = null;
        String sensediaAuth = null;
        Integer limitAccessTokens = null;
        String codeAccessTokens = null;
        Boolean filterAccessTokens = null;
        APP response = api.getAppTokenById1(code, sensediaAuth, limitAccessTokens, codeAccessTokens, filterAccessTokens);

        // TODO: test validations
    }
    
    /**
     * Retrive changelog per app id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChangeLogByAppId1Test() throws ApiException {
        Long id = null;
        String sensediaAuth = null;
        List<ChangeLogBean> response = api.getChangeLogByAppId1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Delete a app
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeApp1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        api.removeApp1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Update a app
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApp1Test() throws ApiException {
        String id = null;
        APP appTokenBean = null;
        String sensediaAuth = null;
        APPResponse response = api.updateApp1(id, appTokenBean, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Validate partial app
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validatePartialApp1Test() throws ApiException {
        String sensediaAuth = null;
        APP appTokenBean = null;
        Object response = api.validatePartialApp1(sensediaAuth, appTokenBean);

        // TODO: test validations
    }
    
}
