/*
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sensedia.api.v3;

import com.sensedia.api.v3.client.ApiException;
import com.sensedia.api.v3.model.API;
import com.sensedia.api.v3.model.APICreateBean;
import com.sensedia.api.v3.model.ChangeLog;
import com.sensedia.api.v3.model.ModelAPIResponse;
import com.sensedia.api.v3.model.ResponseEntity;
import com.sensedia.api.v3.model.RevisionBean;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for APIsApi
 */
@Ignore
public class APIsApiTest {

    private final APIsApi api = new APIsApi();

    
    /**
     * Clone a API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloneApi1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        API apiBean = null;
        ModelAPIResponse response = api.cloneApi1(id, sensediaAuth, apiBean);

        // TODO: test validations
    }
    
    /**
     * Create a new API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApi1Test() throws ApiException {
        String sensediaAuth = null;
        APICreateBean bean = null;
        ModelAPIResponse response = api.createApi1(sensediaAuth, bean);

        // TODO: test validations
    }
    
    /**
     * Create new version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewVersion1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        API apiBean = null;
        ModelAPIResponse response = api.createNewVersion1(id, sensediaAuth, apiBean);

        // TODO: test validations
    }
    
    /**
     * Find API by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiById1Test() throws ApiException {
        String apiId = null;
        String sensediaAuth = null;
        String filter = null;
        API response = api.getApiById1(apiId, sensediaAuth, filter);

        // TODO: test validations
    }
    
    /**
     * Return all APIs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApis1Test() throws ApiException {
        String sensediaAuth = null;
        Boolean privateAPI = null;
        String filter = null;
        List<API> response = api.getApis1(sensediaAuth, privateAPI, filter);

        // TODO: test validations
    }
    
    /**
     * Retrive changelog per API id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChangeLogByApiId1Test() throws ApiException {
        Long id = null;
        String sensediaAuth = null;
        List<ChangeLog> response = api.getChangeLogByApiId1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Find last revision by API id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLastRevisionByApi1Test() throws ApiException {
        Long id = null;
        String sensediaAuth = null;
        RevisionBean response = api.getLastRevisionByApi1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Find version by API id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsByApi1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        List<API> response = api.getVersionsByApi1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Delete a API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeApi1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        ResponseEntity response = api.removeApi1(id, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Delete environment link with API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeLinkEnvironmentWithApi1Test() throws ApiException {
        String id = null;
        String environmentId = null;
        String sensediaAuth = null;
        ResponseEntity response = api.removeLinkEnvironmentWithApi1(id, environmentId, sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Update a API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApi1Test() throws ApiException {
        String id = null;
        String sensediaAuth = null;
        API apiBean = null;
        ModelAPIResponse response = api.updateApi1(id, sensediaAuth, apiBean);

        // TODO: test validations
    }
    
    /**
     * Validate partial a API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validatePartialApi1Test() throws ApiException {
        String sensediaAuth = null;
        API bean = null;
        ResponseEntity response = api.validatePartialApi1(sensediaAuth, bean);

        // TODO: test validations
    }
    
}
