/*
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sensedia.api.v3;

import com.sensedia.api.v3.client.ApiException;
import com.sensedia.api.v3.model.CacheMetric;
import com.sensedia.api.v3.model.CallsMetric;
import com.sensedia.api.v3.model.LatencyMetric;
import com.sensedia.api.v3.model.OperationHealth;
import com.sensedia.api.v3.model.OperationMetric;
import com.sensedia.api.v3.model.TokensMetric;
import com.sensedia.api.v3.model.TopAccessToken;
import com.sensedia.api.v3.model.TopApp;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetricsApi
 */
@Ignore
public class MetricsApiTest {

    private final MetricsApi api = new MetricsApi();

    
    /**
     * Find access token consolited by month
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessTokensByMonth1Test() throws ApiException {
        String sensediaAuth = null;
        String beginDate = null;
        String endDate = null;
        String resolution = null;
        List<TokensMetric> response = api.getAccessTokensByMonth1(sensediaAuth, beginDate, endDate, resolution);

        // TODO: test validations
    }
    
    /**
     * Find apps consolited by month
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppsByMonth1Test() throws ApiException {
        String sensediaAuth = null;
        String beginDate = null;
        String endDate = null;
        String resolution = null;
        List<TokensMetric> response = api.getAppsByMonth1(sensediaAuth, beginDate, endDate, resolution);

        // TODO: test validations
    }
    
    /**
     * Find cache
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCache1Test() throws ApiException {
        String sensediaAuth = null;
        Long apiId = null;
        Long revisionId = null;
        Long operationId = null;
        Long environmentId = null;
        String beginDate = null;
        String endDate = null;
        String resolution = null;
        List<OperationMetric> response = api.getCache1(sensediaAuth, apiId, revisionId, operationId, environmentId, beginDate, endDate, resolution);

        // TODO: test validations
    }
    
    /**
     * Find cache latency
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCacheLatency1Test() throws ApiException {
        String sensediaAuth = null;
        Long apiId = null;
        Long revisionId = null;
        Long operationId = null;
        Long environmentId = null;
        String beginDate = null;
        String endDate = null;
        String resolution = null;
        List<OperationMetric> response = api.getCacheLatency1(sensediaAuth, apiId, revisionId, operationId, environmentId, beginDate, endDate, resolution);

        // TODO: test validations
    }
    
    /**
     * Retrive cache size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCacheSize1Test() throws ApiException {
        String sensediaAuth = null;
        Long apiId = null;
        Long revisionId = null;
        Long operationId = null;
        Long environmentId = null;
        CacheMetric response = api.getCacheSize1(sensediaAuth, apiId, revisionId, operationId, environmentId);

        // TODO: test validations
    }
    
    /**
     * Find calls by month
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCallsByMonth1Test() throws ApiException {
        String sensediaAuth = null;
        String beginDate = null;
        String endDate = null;
        String resolution = null;
        Long environmentId = null;
        Long apiId = null;
        Long revisionId = null;
        List<CallsMetric> response = api.getCallsByMonth1(sensediaAuth, beginDate, endDate, resolution, environmentId, apiId, revisionId);

        // TODO: test validations
    }
    
    /**
     * Find Health
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHealth1Test() throws ApiException {
        String sensediaAuth = null;
        Boolean healthPortal = null;
        List<OperationHealth> response = api.getHealth1(sensediaAuth, healthPortal);

        // TODO: test validations
    }
    
    /**
     * Find latency by month
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLatencyByMonth1Test() throws ApiException {
        String sensediaAuth = null;
        String beginDate = null;
        String endDate = null;
        String resolution = null;
        List<LatencyMetric> response = api.getLatencyByMonth1(sensediaAuth, beginDate, endDate, resolution);

        // TODO: test validations
    }
    
    /**
     * Retrive Status Error
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStatusError1Test() throws ApiException {
        String sensediaAuth = null;
        Integer response = api.getStatusError1(sensediaAuth);

        // TODO: test validations
    }
    
    /**
     * Find top access token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopAccessTokens1Test() throws ApiException {
        Integer howMany = null;
        String sensediaAuth = null;
        String beginDate = null;
        String endDate = null;
        String status = null;
        String resolution = null;
        List<TopAccessToken> response = api.getTopAccessTokens1(howMany, sensediaAuth, beginDate, endDate, status, resolution);

        // TODO: test validations
    }
    
    /**
     * Find top apps
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopApps1Test() throws ApiException {
        Integer howMany = null;
        String sensediaAuth = null;
        String beginDate = null;
        String endDate = null;
        String status = null;
        String resolution = null;
        List<TopApp> response = api.getTopApps1(howMany, sensediaAuth, beginDate, endDate, status, resolution);

        // TODO: test validations
    }
    
}
