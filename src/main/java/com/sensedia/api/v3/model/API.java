/*
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sensedia.api.v3.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sensedia.api.v3.model.APIUserBean;
import com.sensedia.api.v3.model.EnvironmentSimpleBean;
import com.sensedia.api.v3.model.PlanSimpleBean;
import com.sensedia.api.v3.model.RevisionSimpleBean;
import com.sensedia.api.v3.model.TeamBean;
import com.sensedia.api.v3.model.UserBean;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;

/**
 * API Model
 */
@ApiModel(description = "API Model")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-06T11:21:38.562-03:00")
public class API {
  @JsonProperty("accessTokenExpiresIn")
  private Long accessTokenExpiresIn = null;

  @JsonProperty("appsCount")
  private Long appsCount = null;

  @JsonProperty("basePath")
  private String basePath = null;

  @JsonProperty("creationDate")
  private DateTime creationDate = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("environments")
  private List<EnvironmentSimpleBean> environments = null;

  @JsonProperty("icon")
  private String icon = null;

  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("lastRevision")
  private RevisionSimpleBean lastRevision = null;

  @JsonProperty("lastVersion")
  private Boolean lastVersion = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("owner")
  private UserBean owner = null;

  @JsonProperty("parentId")
  private Long parentId = null;

  @JsonProperty("plans")
  private List<PlanSimpleBean> plans = null;

  @JsonProperty("privateAPI")
  private Boolean privateAPI = null;

  @JsonProperty("releaseNotes")
  private String releaseNotes = null;

  @JsonProperty("revisions")
  private List<RevisionSimpleBean> revisions = null;

  @JsonProperty("teamVisibility")
  private TeamBean teamVisibility = null;

  @JsonProperty("users")
  private List<APIUserBean> users = null;

  @JsonProperty("version")
  private String version = null;

  /**
   * Gets or Sets visibilityType
   */
  public enum VisibilityTypeEnum {
    ORGANIZATION("ORGANIZATION"),
    
    TEAM("TEAM"),
    
    ME("ME");

    private String value;

    VisibilityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityTypeEnum fromValue(String text) {
      for (VisibilityTypeEnum b : VisibilityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("visibilityType")
  private VisibilityTypeEnum visibilityType = null;

  public API accessTokenExpiresIn(Long accessTokenExpiresIn) {
    this.accessTokenExpiresIn = accessTokenExpiresIn;
    return this;
  }

   /**
   * Get accessTokenExpiresIn
   * @return accessTokenExpiresIn
  **/
  @ApiModelProperty(value = "")
  public Long getAccessTokenExpiresIn() {
    return accessTokenExpiresIn;
  }

  public void setAccessTokenExpiresIn(Long accessTokenExpiresIn) {
    this.accessTokenExpiresIn = accessTokenExpiresIn;
  }

  public API appsCount(Long appsCount) {
    this.appsCount = appsCount;
    return this;
  }

   /**
   * Get appsCount
   * @return appsCount
  **/
  @ApiModelProperty(value = "")
  public Long getAppsCount() {
    return appsCount;
  }

  public void setAppsCount(Long appsCount) {
    this.appsCount = appsCount;
  }

  public API basePath(String basePath) {
    this.basePath = basePath;
    return this;
  }

   /**
   * Get basePath
   * @return basePath
  **/
  @ApiModelProperty(value = "")
  public String getBasePath() {
    return basePath;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public API creationDate(DateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @ApiModelProperty(value = "")
  public DateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(DateTime creationDate) {
    this.creationDate = creationDate;
  }

  public API description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public API environments(List<EnvironmentSimpleBean> environments) {
    this.environments = environments;
    return this;
  }

  public API addEnvironmentsItem(EnvironmentSimpleBean environmentsItem) {
    if (this.environments == null) {
      this.environments = new ArrayList<EnvironmentSimpleBean>();
    }
    this.environments.add(environmentsItem);
    return this;
  }

   /**
   * Get environments
   * @return environments
  **/
  @ApiModelProperty(value = "")
  public List<EnvironmentSimpleBean> getEnvironments() {
    return environments;
  }

  public void setEnvironments(List<EnvironmentSimpleBean> environments) {
    this.environments = environments;
  }

  public API icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @ApiModelProperty(value = "")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public API id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public API lastRevision(RevisionSimpleBean lastRevision) {
    this.lastRevision = lastRevision;
    return this;
  }

   /**
   * Get lastRevision
   * @return lastRevision
  **/
  @ApiModelProperty(value = "")
  public RevisionSimpleBean getLastRevision() {
    return lastRevision;
  }

  public void setLastRevision(RevisionSimpleBean lastRevision) {
    this.lastRevision = lastRevision;
  }

  public API lastVersion(Boolean lastVersion) {
    this.lastVersion = lastVersion;
    return this;
  }

   /**
   * Get lastVersion
   * @return lastVersion
  **/
  @ApiModelProperty(value = "")
  public Boolean getLastVersion() {
    return lastVersion;
  }

  public void setLastVersion(Boolean lastVersion) {
    this.lastVersion = lastVersion;
  }

  public API name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public API owner(UserBean owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @ApiModelProperty(value = "")
  public UserBean getOwner() {
    return owner;
  }

  public void setOwner(UserBean owner) {
    this.owner = owner;
  }

  public API parentId(Long parentId) {
    this.parentId = parentId;
    return this;
  }

   /**
   * Get parentId
   * @return parentId
  **/
  @ApiModelProperty(value = "")
  public Long getParentId() {
    return parentId;
  }

  public void setParentId(Long parentId) {
    this.parentId = parentId;
  }

  public API plans(List<PlanSimpleBean> plans) {
    this.plans = plans;
    return this;
  }

  public API addPlansItem(PlanSimpleBean plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<PlanSimpleBean>();
    }
    this.plans.add(plansItem);
    return this;
  }

   /**
   * Get plans
   * @return plans
  **/
  @ApiModelProperty(value = "")
  public List<PlanSimpleBean> getPlans() {
    return plans;
  }

  public void setPlans(List<PlanSimpleBean> plans) {
    this.plans = plans;
  }

  public API privateAPI(Boolean privateAPI) {
    this.privateAPI = privateAPI;
    return this;
  }

   /**
   * Get privateAPI
   * @return privateAPI
  **/
  @ApiModelProperty(value = "")
  public Boolean getPrivateAPI() {
    return privateAPI;
  }

  public void setPrivateAPI(Boolean privateAPI) {
    this.privateAPI = privateAPI;
  }

  public API releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

   /**
   * Get releaseNotes
   * @return releaseNotes
  **/
  @ApiModelProperty(value = "")
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }

  public API revisions(List<RevisionSimpleBean> revisions) {
    this.revisions = revisions;
    return this;
  }

  public API addRevisionsItem(RevisionSimpleBean revisionsItem) {
    if (this.revisions == null) {
      this.revisions = new ArrayList<RevisionSimpleBean>();
    }
    this.revisions.add(revisionsItem);
    return this;
  }

   /**
   * Get revisions
   * @return revisions
  **/
  @ApiModelProperty(value = "")
  public List<RevisionSimpleBean> getRevisions() {
    return revisions;
  }

  public void setRevisions(List<RevisionSimpleBean> revisions) {
    this.revisions = revisions;
  }

  public API teamVisibility(TeamBean teamVisibility) {
    this.teamVisibility = teamVisibility;
    return this;
  }

   /**
   * Get teamVisibility
   * @return teamVisibility
  **/
  @ApiModelProperty(value = "")
  public TeamBean getTeamVisibility() {
    return teamVisibility;
  }

  public void setTeamVisibility(TeamBean teamVisibility) {
    this.teamVisibility = teamVisibility;
  }

  public API users(List<APIUserBean> users) {
    this.users = users;
    return this;
  }

  public API addUsersItem(APIUserBean usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<APIUserBean>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @ApiModelProperty(value = "")
  public List<APIUserBean> getUsers() {
    return users;
  }

  public void setUsers(List<APIUserBean> users) {
    this.users = users;
  }

  public API version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public API visibilityType(VisibilityTypeEnum visibilityType) {
    this.visibilityType = visibilityType;
    return this;
  }

   /**
   * Get visibilityType
   * @return visibilityType
  **/
  @ApiModelProperty(value = "")
  public VisibilityTypeEnum getVisibilityType() {
    return visibilityType;
  }

  public void setVisibilityType(VisibilityTypeEnum visibilityType) {
    this.visibilityType = visibilityType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    API API = (API) o;
    return Objects.equals(this.accessTokenExpiresIn, API.accessTokenExpiresIn) &&
        Objects.equals(this.appsCount, API.appsCount) &&
        Objects.equals(this.basePath, API.basePath) &&
        Objects.equals(this.creationDate, API.creationDate) &&
        Objects.equals(this.description, API.description) &&
        Objects.equals(this.environments, API.environments) &&
        Objects.equals(this.icon, API.icon) &&
        Objects.equals(this.id, API.id) &&
        Objects.equals(this.lastRevision, API.lastRevision) &&
        Objects.equals(this.lastVersion, API.lastVersion) &&
        Objects.equals(this.name, API.name) &&
        Objects.equals(this.owner, API.owner) &&
        Objects.equals(this.parentId, API.parentId) &&
        Objects.equals(this.plans, API.plans) &&
        Objects.equals(this.privateAPI, API.privateAPI) &&
        Objects.equals(this.releaseNotes, API.releaseNotes) &&
        Objects.equals(this.revisions, API.revisions) &&
        Objects.equals(this.teamVisibility, API.teamVisibility) &&
        Objects.equals(this.users, API.users) &&
        Objects.equals(this.version, API.version) &&
        Objects.equals(this.visibilityType, API.visibilityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenExpiresIn, appsCount, basePath, creationDate, description, environments, icon, id, lastRevision, lastVersion, name, owner, parentId, plans, privateAPI, releaseNotes, revisions, teamVisibility, users, version, visibilityType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class API {\n");
    
    sb.append("    accessTokenExpiresIn: ").append(toIndentedString(accessTokenExpiresIn)).append("\n");
    sb.append("    appsCount: ").append(toIndentedString(appsCount)).append("\n");
    sb.append("    basePath: ").append(toIndentedString(basePath)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environments: ").append(toIndentedString(environments)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastRevision: ").append(toIndentedString(lastRevision)).append("\n");
    sb.append("    lastVersion: ").append(toIndentedString(lastVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    privateAPI: ").append(toIndentedString(privateAPI)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    revisions: ").append(toIndentedString(revisions)).append("\n");
    sb.append("    teamVisibility: ").append(toIndentedString(teamVisibility)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    visibilityType: ").append(toIndentedString(visibilityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

